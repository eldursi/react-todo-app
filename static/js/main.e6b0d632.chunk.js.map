{"version":3,"sources":["Models/Task.tsx","Models/TaskCategoryItem.tsx","Components/SideBar/Styling.tsx","Components/TaskCategories/Styling.tsx","Components/TaskCategories/TaskCategories.tsx","Components/Shared/Date.ts","Components/SideBar/SideBar.tsx","Components/Tasks/Styling.tsx","Components/Shared/InputDialog.tsx","Components/Tasks/TaskList.tsx","Components/ToDoApp/ToDoApp.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["status","Task","id","name","date","this","TaskCategoryItem","color","tasks","active","icon","components","BookmarkBorderIcon","LocalOfferOutlinedIcon","InboxIcon","drawerWidth","useStyles","makeStyles","theme","createStyles","toolbar","minHeight","header","marginLeft","spacing","drawer","width","height","taskCategories","display","flexWrap","taskCategoriesContainer","paddingLeft","paddingRight","taskCategory","margin","backgroundColor","borderRadius","taskCategoryInactive","taskCategoryActive","addCategory","addCategoryListItem","textAlign","fontSize","addCategoryDialogAction","padding","addCategoryInput","borderBottom","taskCategoryTitle","marginTop","fontWeight","drawerPaper","borderRight","taskCategoryListItem","flexDirection","alignItems","TaskCategoryList","props","classes","setTaskCategories","Container","className","List","map","index","Box","addTaskCategory","TaskCategory","IconComponent","boxShadow","ListItem","button","root","onClick","forEach","ListItemIcon","style","ListItemText","primary","Typography","component","length","NewTaskCategory","useState","open","setOpen","listName","setListName","handleClose","handleOnClick","Dialog","onClose","aria-labelledby","fullWidth","DialogTitle","DialogContent","TextField","autoFocus","type","multiline","rows","InputProps","onChange","e","target","value","DialogActions","newCategory","Guid","create","toString","oldTaskCategories","AddCategoryButton","Button","GetMonth","months","today","Date","getMonth","SideBar","Drawer","variant","paper","anchor","DateToday","dayName","days","getDay","GetDay","monthName","getDate","taskListContainer","marginRight","taskListTitleHeader","taskListTitle","taskListIcon","addNewTaskButton","justifyContent","position","bottom","addTask","addTaskListItem","addTaskDialogAction","addTaskInput","taskCheckboxActive","textDecoration","taskCheckbox","taskDate","overdueMessage","taskItem","taskForm","actionButton","minWidth","InputDialog","title","buttonText","handleOnChange","defaultValue","DateDialog","utils","DateFnsUtils","Grid","container","justify","disableToolbar","format","label","KeyboardButtonProps","TaskList","console","log","activeTaskCategory","filter","handleTaskListUpdate","FormControl","t","FormGroup","task","setTasks","TaskItem","updateTask","taskElement","TaskCheckbox","done","checked","setChecked","overdue","checkboxClass","FormControlLabel","control","Checkbox","event","new","SetTaskDate","setDate","SetTaskDateButton","startIcon","NewTask","taskName","setTaskName","newTask","push","AddTaskButton","EditTask","EditTaskButton","DeleteTask","updatedTasks","element","ToDoApp","tempCategoryList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6b0d632.chunk.js","sourcesContent":["export enum status\n{\n    new,\n    done\n}\n\nexport class Task {\n    constructor(id: string, name: string, status: status, date?: Date){\n        this.id = id\n        this.name = name\n        this.date = date\n        this.status = status\n    }\n\n    id: string\n    name: string = \"\"\n    date: Date | undefined\n    status: status\n} \n","import BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport LocalOfferOutlinedIcon from '@material-ui/icons/LocalOfferOutlined';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport { Task } from './Task';\n\nexport class TaskCategoryItem {\n    constructor(id: string, name: string, color: string = \"\", tasks: Task[] = [], active: boolean = false, icon: string = \"\"){\n        this.id = id\n        this.name = name\n        this.color = color\n        this.tasks = tasks\n        this.active = active\n        this.icon = icon\n    }\n\n    id: string\n    name: string = \"\"\n    color: string = \"\"\n    tasks: Task[] = []\n    active: boolean\n    icon: string\n\n    components: componentsProp = {\n        BookmarkBorderIcon: BookmarkBorderIcon,\n        LocalOfferOutlinedIcon: LocalOfferOutlinedIcon,\n        InboxIcon: InboxIcon\n    }\n} \n\ntype componentsProp = {\n    [key: string]: any\n}","import { makeStyles, createStyles, Theme } from \"@material-ui/core\"\n\nconst drawerWidth = '19rem';\n\nconst useStyles = makeStyles((theme: Theme) =>  createStyles({\n    toolbar:{\n      minHeight: \"3rem\"\n    },\n    header:{\n      \"& > *\": {\n        marginLeft: theme.spacing(2.9)\n      }\n    },\n    drawer:{\n      width: drawerWidth,\n      height: \"100vh\"\n    },\n    taskCategories:{\n      display: \"flex\",\n      flexWrap: \"wrap\",\n    },\n    taskCategoriesContainer:{\n      paddingLeft: theme.spacing(1.5),\n      paddingRight: theme.spacing(1.5)\n    },\n    taskCategory:{\n      margin: theme.spacing(1.2),\n      width: theme.spacing(15),\n      height: theme.spacing(15),\n      backgroundColor: \"white\",\n      borderRadius: \"3%\"\n    },\n    taskCategoryInactive:{\n      backgroundColor: \"white\",\n    },\n    taskCategoryActive:{\n      backgroundColor: \"#ededee\"\n    },\n    addCategory:{\n      width: theme.spacing(15),\n      marginLeft: theme.spacing(1.2),\n      borderRadius: \"4%\"\n    },\n    addCategoryListItem:{\n      backgroundColor: \"#7bbb5e\",\n      color:\"white\",\n      textAlign: \"center\",\n      \"& *\": {\n        fontSize: \"1.3rem\",\n      }\n    },\n    addCategoryDialogAction:{\n      padding: 0,\n      \"& button\": {\n        borderRadius: \"0\",\n      }\n    },\n    addCategoryInput:{\n      \"&&&:before\": {\n        borderBottom: \"none\"\n      },\n      \"&&:after\": {\n        borderBottom: \"none\"\n      }\n    },\n    taskCategoryTitle:{\n      marginTop: \"auto\",\n      \"& *\": {\n        fontSize: \"0.8rem\",\n        fontWeight: \"bold\"\n      }\n    },\n    drawerPaper: {\n      width: drawerWidth,\n      borderRight: \"none\",\n      backgroundColor: \"#fafafa\"\n    }\n  })\n)\n\nexport default useStyles","import { makeStyles, Theme, createStyles } from \"@material-ui/core\"\n\nconst useStyles = makeStyles((theme: Theme) =>  createStyles({\n\n  taskCategories:{\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  taskCategoriesContainer:{\n    paddingLeft: theme.spacing(1.5),\n    paddingRight: theme.spacing(1.5)\n  },\n  taskCategory:{\n    margin: theme.spacing(1.2),\n    width: theme.spacing(15),\n    height: theme.spacing(15),\n    backgroundColor: \"white\",\n    borderRadius: \"3%\"\n  },\n  taskCategoryInactive:{\n    backgroundColor: \"white\",\n  },\n  taskCategoryActive:{\n    backgroundColor: \"#ededee\"\n  },\n  addCategory:{\n    width: theme.spacing(15),\n    marginLeft: theme.spacing(1.2),\n    borderRadius: \"4%\"\n  },\n  addCategoryListItem:{\n    backgroundColor: \"#7bbb5e\",\n    color:\"white\",\n    textAlign: \"center\",\n    \"& *\": {\n      fontSize: \"1.3rem\",\n    }\n  },\n  addCategoryDialogAction:{\n    padding: 0,\n    \"& button\": {\n      borderRadius: \"0\",\n    }\n  },\n  addCategoryInput:{\n    \"&&&:before\": {\n      borderBottom: \"none\"\n    },\n    \"&&:after\": {\n      borderBottom: \"none\"\n    }\n  },\n  taskCategoryListItem:{\n    height: '100%',\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"flex-start\",\n    padding: \"0.7rem\"\n  },\n  taskCategoryTitle:{\n    marginTop: \"auto\",\n    \"& *\": {\n      fontSize: \"0.8rem\",\n      fontWeight: \"bold\"\n    }\n  }\n})\n)\n\nexport default useStyles","import useStyles from \"./Styling\"\nimport { Box, Button, Container, List, ListItem, ListItemIcon, ListItemText, TextField, Typography } from \"@material-ui/core\"\nimport LocalOfferOutlinedIcon from '@material-ui/icons/LocalOfferOutlined';\nimport { useState } from \"react\";\nimport { TaskCategoryItem } from \"../../Models/TaskCategoryItem\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport { Guid } from \"guid-typescript\";\n\nexport const TaskCategoryList = (props: any) => {\n    const classes = useStyles()\n    const taskCategories = props.taskCategories\n    const setTaskCategories = props.setTaskCategories\n    return (\n        <Container className={classes.taskCategoriesContainer}>\n            <List className={classes.taskCategories}>\n                {taskCategories.map((taskCategory, index) => {\n                    return (<TaskCategory \n                        taskCategory={taskCategory}\n                        taskCategories={taskCategories}\n                        setTaskCategories={setTaskCategories}\n                        key={index} />)\n                })}\n            </List>\n            <Box className={classes.addCategory}>\n                <NewTaskCategory addTaskCategory={setTaskCategories} />  \n            </Box>\n        </Container>\n    )\n}\n\nexport const TaskCategory = (props:any) =>\n{\n    const classes = useStyles()\n    const taskCategories = props.taskCategories\n    var {name, active, components, icon, id, tasks} = props.taskCategory;\n    const IconComponent = components[icon]\n\n    const setActiveCategory = () => {    \n        taskCategories.forEach( taskCategory => {\n            if(taskCategory.id === id)\n            {\n                taskCategory.active = true\n            }\n            else\n            {\n                taskCategory.active = false\n            }  \n        });\n        props.setTaskCategories([...taskCategories])       \n    }\n\n    return (\n        <Box \n        className={`${classes.taskCategory} ${active ? classes.taskCategoryActive: classes.taskCategoryInactive}`} \n        boxShadow={active ? 0 : 1}>\n            <ListItem  id={id} button classes={{root:classes.taskCategoryListItem }} onClick={setActiveCategory}>\n                <Box>\n                    <ListItemIcon>\n                        {(IconComponent != null)? <IconComponent style={{height: \"1.2rem\"}}/> : <LocalOfferOutlinedIcon style={{height: \"1.2rem\"}}/>}\n                    </ListItemIcon>\n                </Box>\n                <Box className={classes.taskCategoryTitle}>\n                    <ListItemText primary={name} />\n                    <Typography component=\"span\" style={{fontSize:\"0.7rem\", color:\"#7c7d7d\"}}>{tasks.length} tasks</Typography>\n                </Box>\n            </ListItem>\n        </Box>\n    )\n}\n\nconst NewTaskCategory = (props:any) => {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [listName, setListName] = useState(\"\");\n    \n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    \n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const addCategory = () => \n    {\n        const addTaskCategory = props.addTaskCategory\n        const newCategory = new TaskCategoryItem(\n            Guid.create().toString(),\n            listName)                \n        addTaskCategory(oldTaskCategories => [...oldTaskCategories, newCategory])\n        handleClose()\n    }\n\n    return (\n        <div>\n            <AddCategoryButton handleOnClick={handleClickOpen}/>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth>\n                <DialogTitle id=\"form-dialog-title\">New List</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        type=\"text\"\n                        fullWidth\n                        multiline\n                        rows={10}\n                        InputProps= {{ className: classes.addCategoryInput}}\n                        onChange={(e) => { setListName(e.target.value) }}\n                    />\n                </DialogContent>\n                <DialogActions className = {classes.addCategoryDialogAction}>\n                    <AddCategoryButton handleOnClick={addCategory}/>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );      \n}\n\nconst AddCategoryButton = (props:any) => {\n    const classes = useStyles();\n    return (\n        <Button onClick={props.handleOnClick} color=\"primary\" fullWidth className = {classes.addCategoryListItem}>\n        +\n        </Button>\n    )\n}","export const GetDay = (date?: Date) => {\n    const days = ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY']\n    const today = new Date()\n    const dayName = date? days[date.getDay()] : days[today.getDay()] \n    return dayName\n}\n\nexport const GetMonth = (date?: Date) => {\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const today = new Date()\n    const monthName = date? months[date.getMonth()] : months[today.getMonth()] \n    return monthName\n}\n","import { Drawer, Typography } from \"@material-ui/core\"\nimport useStyles from \"./Styling\"\nimport { TaskCategoryList } from \"../TaskCategories/TaskCategories\";\nimport { GetDay, GetMonth } from \"../Shared/Date\";\n\nexport const SideBar = (props: any) => {\n    const taskCategories = props.taskCategories\n    const setTaskCategories = props.setTaskCategories\n    const classes = useStyles()\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"permanent\"\n            classes={{\n            paper: classes.drawerPaper\n            }}\n            anchor=\"left\"\n        >\n            <div className={classes.toolbar} />\n            <DateToday />\n            <TaskCategoryList taskCategories={taskCategories} setTaskCategories={setTaskCategories} />\n        </Drawer>\n    )\n\n}\n\nconst DateToday = () => {\n    const dayName = GetDay()\n    const monthName = GetMonth()\n\n    const classes = useStyles()\n    return (\n        <div className={classes.header}>\n            <Typography component=\"span\" style={{fontSize:\"0.7rem\", color:\"#7c7d7d\"}}>{dayName}</Typography>\n            <Typography component=\"h3\" variant=\"h6\" style={{fontWeight:\"bold\"}}>{new Date().getDate().toString()} {monthName}</Typography>\n        </div>\n    )\n}","import { makeStyles, createStyles, Theme } from \"@material-ui/core\"\n\nconst useStyles = makeStyles((theme: Theme) =>  createStyles({\n    toolbar:{\n      minHeight: \"3rem\"\n    } ,\n    taskListContainer:{\n      padding:0,\n      marginLeft: theme.spacing(4),\n      marginRight: theme.spacing(4),\n      width: \"100%\"\n    },\n    header:{\n      height: theme.spacing(8),\n    },\n    taskListTitleHeader:\n    {\n      display:\"inline-flex\",\n    },\n    taskListTitle:{\n      \"& h1\":{\n        fontWeight: \"bold\",\n      },\n      \"& span\":{\n        fontSize: \"0.7rem\",\n        color: \"#7c7d7d\"\n      },\n      marginLeft: theme.spacing(1.2)\n    },\n    taskListIcon:{\n      marginTop: theme.spacing(0.5),\n      color: \"#0000008a\"\n    },\n    addNewTaskButton:{\n      padding: theme.spacing(0.25),\n      color: \"#0000008a\",\n      display: \"flex\",\n      justifyContent: \"flex-start\",\n      alignItems: \"flex-end\",\n      position: \"absolute\",\n      bottom: \"10px\"\n    },\n    addTask:{\n      width: theme.spacing(15),\n      marginLeft: theme.spacing(1.2),\n      borderRadius: \"4%\"\n    },\n    addTaskListItem:{\n      backgroundColor: \"#7bbb5e\",\n      color:\"white\",\n      textAlign: \"center\",\n      \"& *\": {\n        fontSize: \"1.3rem\",\n      }\n    },\n    addTaskDialogAction:{\n      padding: 0,\n      \"& button\": {\n        borderRadius: \"0\",\n      }\n    },\n    addTaskInput:{\n      \"&&&:before\": {\n        borderBottom: \"none\"\n      },\n      \"&&:after\": {\n        borderBottom: \"none\"\n      }\n    },\n    taskCheckboxActive:{\n      textDecoration: \"line-through\",\n    },\n    taskCheckbox:{\n    },\n    taskDate:{\n      fontSize: '0.8rem',\n      marginLeft: '2rem',\n      color: '#7c7d7d',\n      display: 'block',\n      marginTop: '-10px'\n    },\n    overdueMessage:{\n      fontSize: '0.8rem',\n      color: 'red'\n    },\n    taskItem:{\n      flexDirection:\"row\",\n      width: \"100%\",\n      justifyContent: \"space-between\"\n    },\n    taskForm:{\n      width: \"100%\"\n    },\n    actionButton:{\n      color: \"#0000008a\",\n      minWidth:\"fit-content\"\n    }\n  })\n)\n\nexport default useStyles","import { Dialog, DialogTitle, DialogContent, TextField, DialogActions, Button, Grid } from \"@material-ui/core\"\nimport useStyles from \"../Tasks/Styling\"\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport React from \"react\";\n\nexport const InputDialog = (props:any) =>\n{\n    const classes = useStyles()\n    const {open, handleClose, handleOnClick, title, buttonText, handleOnChange, value} = props\n    return (\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth>\n            <DialogTitle id=\"form-dialog-title\">{title}</DialogTitle>\n            <DialogContent>\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"name\"\n                    type=\"text\"\n                    fullWidth\n                    multiline\n                    rows={10}\n                    InputProps= {{ className: classes.addTaskInput}}\n                    onChange={(e) => { handleOnChange(e.target.value) }}\n                    defaultValue={ value }\n                />\n            </DialogContent>\n            <DialogActions className = {classes.addTaskDialogAction}>\n                <Button onClick={handleOnClick} color=\"primary\" fullWidth className = {classes.addTaskListItem}>\n                {buttonText}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport const DateDialog = (props:any) => \n{\n    const classes = useStyles()\n    const {open, handleClose, handleOnClick, buttonText, handleOnChange, value} = props\n    return (\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth>\n            <DialogContent>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <Grid container justify='space-around'>\n                        <KeyboardDatePicker\n                            disableToolbar\n                            variant='static'\n                            format='MM/dd/yyyy'\n                            margin='normal'\n                            id='date-picker'\n                            label='Date Picker'\n                            value={value}\n                            onChange={handleOnChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date'\n                            }}\n                            />\n                    </Grid>\n                </MuiPickersUtilsProvider>\n\n            </DialogContent>\n            <DialogActions className = {classes.addTaskDialogAction}>\n                <Button onClick={handleOnClick} color=\"primary\" fullWidth className = {classes.addTaskListItem}>\n                {buttonText}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\n","import Checkbox from '@material-ui/core/Checkbox';\nimport LocalOfferOutlinedIcon from '@material-ui/icons/LocalOfferOutlined';\nimport { Box, Button, FormControl, FormControlLabel, FormGroup, Typography } from \"@material-ui/core\";\nimport useStyles from \"./Styling\";\nimport { Task, status } from \"../../Models/Task\";\nimport { useState } from 'react';\nimport { Guid } from 'guid-typescript';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { InputDialog, DateDialog } from '../Shared/InputDialog';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CalendarTodayIcon from '@material-ui/icons/CalendarToday';\nimport { GetMonth } from \"../Shared/Date\";\n\nexport const TaskList = (props: any) => {\n    const taskCategories = props.taskCategories\n    console.log(\"in TaskList\")\n    console.log(taskCategories)\n    const activeTaskCategory = taskCategories.filter((taskCategory) => {\n        return taskCategory.active\n      })[0]\n    const { tasks, components , icon, name}  = activeTaskCategory\n    const IconComponent = components[icon]\n\n    const handleTaskListUpdate = (tasks: Task[]) => {\n        console.log(\"in handleTaskListUpdate\")\n        activeTaskCategory.tasks = tasks\n        console.log(tasks)\n\n        taskCategories.forEach(taskCategory => {\n            if(taskCategory.id === activeTaskCategory.id)\n            {\n                taskCategory = activeTaskCategory\n                props.setTaskCategories([...taskCategories])\n            }\n        });\n    }\n\n    const classes = useStyles()\n    return (\n        <div className={classes.taskListContainer} >\n            <div className={classes.toolbar} />\n            <Box className={classes.header}>\n                <Box className={classes.taskListTitleHeader}>\n                    <Box className={classes.taskListIcon}>{(IconComponent != null)? <IconComponent/> : <LocalOfferOutlinedIcon/>}</Box>\n                    <Box className={classes.taskListTitle}>\n                        <Typography component=\"h1\" variant=\"h6\">{name}</Typography>\n                        <Typography component=\"span\" variant=\"subtitle1\" style={{display:\"block\"}}>{tasks.length} tasks</Typography>\n                    </Box>\n                </Box>\n            </Box>\n            <Box>\n                <FormControl className={classes.taskForm}>\n                        {tasks.map((t) =>(\n                            <FormGroup className={classes.taskItem} key={t.id} >\n                                 <TaskItem task={t} tasks={tasks} setTasks={handleTaskListUpdate}/>\n                            </FormGroup>\n\n                        ))}\n                </FormControl>\n            </Box>\n            <Box>\n                <NewTask addTask={handleTaskListUpdate} tasks={tasks}/>\n            </Box>        \n        </div>\n    )\n}\n\nconst TaskItem = (props:any) => {\n    const { task, setTasks, tasks } = props\n    const handleTaskUpdate = (task: Task) => {\n        tasks.forEach(taskElement => {\n            if(taskElement.id === task.id)\n            {\n                console.log(task)\n                taskElement = task\n                setTasks(tasks)\n            }\n        });\n    }\n    return (\n        <>\n            <TaskCheckbox task={task} tasks={tasks} updateTask={handleTaskUpdate} setTasks={setTasks}/>\n        </>\n    )\n}\n\nconst TaskCheckbox = (props:any) => {\n    const [checked, setChecked] = useState(props.task.status === status.done);\n    // displays the task checkbox and task title with the edit and delete option \n    const task  = props.task\n    const classes = useStyles()\n    const taskDate = task.date ? `${task.date.getDate()} ${GetMonth(task.date)}` : \"\"\n    const overdue = task.date < new Date()\n    const handleOnChange = (event:any) => {\n        if(event.target.checked)\n        {\n            task.status = status.done\n            setChecked(true)\n        }\n        else{\n            task.status = status.new\n            setChecked(false)\n        }\n        props.updateTask(task)\n    }\n    const checkboxClass = checked ? classes.taskCheckboxActive: classes.taskCheckbox\n    return (\n        <>\n            <Box>\n                <FormControlLabel\n                    control={\n                    <Checkbox onChange={handleOnChange} checked={checked}\n                        name=\"done\" />\n                    }\n                    className={checkboxClass}\n                    label={task.name}\n                />\n                <Typography component=\"span\" variant=\"subtitle1\" className={classes.taskDate}>{overdue && <b className={classes.overdueMessage}>Overdue: </b>} {taskDate}</Typography>\n            </Box>\n            <Box>\n                <EditTask task={task} updateTask={props.updateTask}/>\n                <DeleteTask task={task} tasks={props.tasks} setTasks={props.setTasks}/>\n                <SetTaskDate task={task} updateTask={props.updateTask}/>\n            </Box>\n        </>\n    )\n}\n\nconst SetTaskDate = (props:any) => {\n    const { task, updateTask } = props\n    const [open, setOpen] = useState(false);\n    const [date, setDate] = useState(new Date());\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    \n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleChange = (event:any) => {\n        console.log(\"in handleOnChange\")\n        setDate(event)\n    }\n    const handleClick = (event:any) => {\n        task.date=date\n        updateTask(task)\n        handleClose()\n        console.log(\"in handleClick, date is \"+ task.date.toString())\n    }\n\n    return (\n        <>\n            <SetTaskDateButton handleOnClick={handleClickOpen}/>\n            <DateDialog open={open} handleClose={handleClose} handleOnChange={handleChange} handleOnClick={handleClick} buttonText={\"Save\"} value={date}/>\n        </>\n    );     \n}\n\nconst SetTaskDateButton = (props:any) => {\n    const classes = useStyles();\n    return (\n        <Button onClick={props.handleOnClick} startIcon={<CalendarTodayIcon/>} className={classes.actionButton}/>\n    )\n}\n\nconst NewTask = (props:any) => {\n    const [open, setOpen] = useState(false);\n    const [taskName, setTaskName] = useState(\"\");\n    \n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    \n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const addTaskItem = () => \n    {\n        const { addTask, tasks }= props\n        const newTask = new Task(\n            Guid.create().toString(),\n            taskName,\n            status.new)   \n        tasks.push(newTask)\n        addTask(tasks)\n        handleClose()\n    }\n\n    return (\n        <>\n            <AddTaskButton handleOnClick={handleClickOpen}/>\n            <InputDialog open={open} handleClose={handleClose} handleOnChange={setTaskName} handleOnClick={addTaskItem} buttonText={\"+\"} title={\"New task\"}/>\n        </>\n    );      \n}\n\nconst AddTaskButton = (props:any) => {\n    const classes = useStyles();\n    return (\n        <Button onClick={props.handleOnClick} startIcon={<AddBoxIcon/>} className={classes.addNewTaskButton}>\n            Add New Task\n        </Button>\n    )\n}\n\nconst EditTask = (props:any) => {\n    const { task, updateTask } = props\n    const [open, setOpen] = useState(false);\n    const [taskName, setTaskName] = useState(task.name);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    \n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleChange = (event:any) => {\n        console.log(\"in handleOnChange\")\n        setTaskName(event)\n    }\n    const handleClick = (event:any) => {\n        task.name=taskName\n        updateTask(task)\n        handleClose()\n    }\n\n    return (\n        <>\n            <EditTaskButton handleOnClick={handleClickOpen}/>\n            <InputDialog open={open} handleClose={handleClose} handleOnChange={handleChange} handleOnClick={handleClick} buttonText={\"Save\"} title={\"Edit task\"} value={taskName}/>\n        </>\n    );     \n}\n\nconst EditTaskButton = (props:any) => {\n    const classes = useStyles();\n    return (\n        <Button onClick={props.handleOnClick} startIcon={<EditIcon/>} className={classes.actionButton}/>\n    )\n}\n\nconst DeleteTask = (props:any) => {\n    const classes = useStyles();\n    const { task, tasks, setTasks } = props\n    const handleOnClick = () => {\n        const updatedTasks = tasks.filter(function(element){ \n            return element.id !== task.id; \n        });\n        setTasks(updatedTasks)\n    }\n\n    return (\n        <Button onClick={handleOnClick} startIcon={<DeleteIcon/>} className={classes.actionButton}/>\n    );     \n}\n\n","import React, { useState } from \"react\";\nimport { Task, status } from \"../../Models/Task\";\nimport { TaskCategoryItem } from \"../../Models/TaskCategoryItem\";\nimport { SideBar } from \"../SideBar/SideBar\";\nimport { TaskList } from \"../Tasks/TaskList\";\n\nconst ToDoApp = () =>\n{\n    const tempCategoryList = [\n        new TaskCategoryItem(\n            \"1\",\n            \"Today\", \n            \"red\", \n            [\n                new Task(\"1\", \"Test task\", status.new)\n            ], \n            true, \n            \"BookmarkBorderIcon\"),\n        new TaskCategoryItem(\"2\",\n        \"Inbox\",\n        \"red\",\n        [],\n        false,\n        \"InboxIcon\")\n    ]\n    const [taskCategories, setTaskCategories] =  useState(tempCategoryList) // this will be used to add a task category\n    return(\n        <>\n            <SideBar taskCategories={taskCategories} setTaskCategories={setTaskCategories}/>\n            <TaskList setTaskCategories={setTaskCategories} taskCategories={taskCategories} />   \n        </>\n    )\n}\n\nexport default ToDoApp;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ToDoApp from './Components/ToDoApp/ToDoApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoApp />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}